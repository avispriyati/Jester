{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"jester ALS","provenance":[{"file_id":"1xKcQIdb9Sule1Gnl9IYGGLX5EiUac3J5","timestamp":1643816290640},{"file_id":"1w19vf4-cxQduC-_L5v5gF_UVldxrlF4u","timestamp":1643811656456}],"collapsed_sections":[],"authorship_tag":"ABX9TyNPfhampRg1Be5+KL+rT4qP"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["! apt update"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-yLrw29HALw0","executionInfo":{"status":"ok","timestamp":1644986681889,"user_tz":-420,"elapsed":8713,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"5226931d-bf7f-490d-f079-1fcfb2b6e57e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[33m\r0% [Working]\u001b[0m\r            \rIgn:1 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease\n","\u001b[33m\r0% [Connecting to archive.ubuntu.com (91.189.88.142)] [Connecting to security.u\u001b[0m\r                                                                               \rGet:2 https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/ InRelease [3,626 B]\n","\u001b[33m\r0% [Connecting to archive.ubuntu.com (91.189.88.142)] [Connecting to security.u\u001b[0m\u001b[33m\r0% [Connecting to archive.ubuntu.com (91.189.88.142)] [Connecting to security.u\u001b[0m\r                                                                               \rIgn:3 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  InRelease\n","\u001b[33m\r0% [Connecting to archive.ubuntu.com (91.189.88.142)] [Connecting to security.u\u001b[0m\u001b[33m\r0% [2 InRelease gpgv 3,626 B] [Connecting to archive.ubuntu.com (91.189.88.142)\u001b[0m\r                                                                               \rGet:4 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release [696 B]\n","\u001b[33m\r0% [2 InRelease gpgv 3,626 B] [Connecting to archive.ubuntu.com (91.189.88.142)\u001b[0m\u001b[33m\r0% [2 InRelease gpgv 3,626 B] [Connecting to archive.ubuntu.com (91.189.88.142)\u001b[0m\r                                                                               \rHit:5 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release\n","Get:6 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release.gpg [836 B]\n","Hit:7 http://archive.ubuntu.com/ubuntu bionic InRelease\n","Get:8 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic InRelease [15.9 kB]\n","Get:9 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]\n","Get:10 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]\n","Hit:11 http://ppa.launchpad.net/cran/libgit2/ubuntu bionic InRelease\n","Get:13 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]\n","Get:14 http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic InRelease [15.9 kB]\n","Get:15 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Packages [917 kB]\n","Get:16 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic InRelease [21.3 kB]\n","Get:17 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic/main Sources [1,826 kB]\n","Get:18 http://archive.ubuntu.com/ubuntu bionic-updates/restricted amd64 Packages [816 kB]\n","Get:19 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [2,248 kB]\n","Get:20 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [2,565 kB]\n","Get:21 http://archive.ubuntu.com/ubuntu bionic-updates/multiverse amd64 Packages [29.0 kB]\n","Get:22 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [3,004 kB]\n","Get:23 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic/main amd64 Packages [936 kB]\n","Get:24 http://security.ubuntu.com/ubuntu bionic-security/restricted amd64 Packages [783 kB]\n","Get:25 http://security.ubuntu.com/ubuntu bionic-security/multiverse amd64 Packages [21.1 kB]\n","Get:26 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 Packages [1,470 kB]\n","Get:27 http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic/main amd64 Packages [45.3 kB]\n","Get:28 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic/main amd64 Packages [42.8 kB]\n","Fetched 15.0 MB in 5s (2,903 kB/s)\n","Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","66 packages can be upgraded. Run 'apt list --upgradable' to see them.\n"]}]},{"cell_type":"code","metadata":{"id":"Z3Riz5g990hW"},"source":["#Java JDK\n","!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n","#Downloading Spark\n","!wget -q https://archive.apache.org/dist/spark/spark-3.0.0/spark-3.0.0-bin-hadoop3.2.tgz\n","#Unzipping the hadoop file\n","!tar xf spark-3.0.0-bin-hadoop3.2.tgz"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xk5wePix94Ef","executionInfo":{"status":"ok","timestamp":1644987065113,"user_tz":-420,"elapsed":990,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"eb8ff714-bbeb-4e29-dc68-d890d91d63ea"},"source":["#Unzip the file\n","!unzip j.zip"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Archive:  j.zip\n","  inflating: jester_items.csv        \n","  inflating: jester_ratings.csv      \n"]}]},{"cell_type":"code","metadata":{"id":"xie483cW980m"},"source":["###################### SPARK SETUP ################################\n","#Install findspark\n","!pip install -q findspark"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uetiZ7hS9_C7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644986724245,"user_tz":-420,"elapsed":3904,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"37b5c19d-52cd-4195-c34d-cde6d312a2e0"},"source":["!pip install py4j"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting py4j\n","  Downloading py4j-0.10.9.3-py2.py3-none-any.whl (198 kB)\n","\u001b[?25l\r\u001b[K     |█▋                              | 10 kB 19.4 MB/s eta 0:00:01\r\u001b[K     |███▎                            | 20 kB 25.0 MB/s eta 0:00:01\r\u001b[K     |█████                           | 30 kB 14.4 MB/s eta 0:00:01\r\u001b[K     |██████▋                         | 40 kB 10.7 MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 51 kB 7.9 MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 61 kB 8.0 MB/s eta 0:00:01\r\u001b[K     |███████████▌                    | 71 kB 7.6 MB/s eta 0:00:01\r\u001b[K     |█████████████▏                  | 81 kB 8.5 MB/s eta 0:00:01\r\u001b[K     |██████████████▉                 | 92 kB 6.8 MB/s eta 0:00:01\r\u001b[K     |████████████████▌               | 102 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 112 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████▊            | 122 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▍          | 133 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 143 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 153 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▍     | 163 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 174 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 184 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▎| 194 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 198 kB 7.3 MB/s \n","\u001b[?25hInstalling collected packages: py4j\n","Successfully installed py4j-0.10.9.3\n"]}]},{"cell_type":"code","metadata":{"id":"W97LNBHW-4zO"},"source":["#Setting up environment variables\n","import os\n","os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n","os.environ[\"SPARK_HOME\"] = \"/content/spark-3.0.0-bin-hadoop3.2\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uLjmc1d--BE5"},"source":["#Initialize Spark session using findspark lib\n","import findspark\n","findspark.init()\n","from pyspark.sql import SparkSession\n","spark = SparkSession.builder.master(\"local[*]\").getOrCreate()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7snafWyypcnh"},"source":["from pyspark.sql import functions as f"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from pyspark import SparkContext, SQLContext   # required for dealing with dataframes"],"metadata":{"id":"TkOMIu2lEp9r"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zrnte6yI-G30"},"source":["**read the data file**"]},{"cell_type":"code","metadata":{"id":"-P7b4eCq-b-b"},"source":["def readFiles(filename):\n","  data = spark.read.format('com.databricks.spark.csv').\\\n","                               options(header='true', \\\n","                               inferschema='true').\\\n","                load(filename,header=True)\n","  return data"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#setting the path of the files\n","file_ratings ='/content/jester_ratings.csv'"],"metadata":{"id":"97W1FRmrIEyo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Read the data files\n","ratings = readFiles(file_ratings)"],"metadata":{"id":"Iy-6r1Z_IRG2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ratings.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0atVG3QGIb-c","executionInfo":{"status":"ok","timestamp":1644987104927,"user_tz":-420,"elapsed":19,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"8dace360-62cd-4f08-f47b-330286b21dbe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Row(userId=1, jokeId=5, rating=0.21899999999999997)"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"QUsAQxFEbEVZ"},"source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","from pyspark import SparkContext, SQLContext\n","\n","from pyspark.sql.functions import *\n","from pyspark.sql import functions as F\n","\n","from pyspark.sql.functions import lit\n","from pyspark.ml.feature import IndexToString\n","from pyspark.ml.feature import StringIndexer\n","from pyspark.sql.functions import col\n","from pyspark.ml.tuning import ParamGridBuilder, TrainValidationSplit,CrossValidator\n","from pyspark.ml.evaluation import RegressionEvaluator\n","from pyspark.ml.recommendation import ALS\n","from pyspark.ml import Pipeline, PipelineModel"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Importing MovieLens Ratings Dataset\n","ratings_all = pd.read_csv('/content/jester_ratings.csv')\n","\n","user_ratings_count = ratings_all.groupby(['userId']).count()['jokeId']\n","joke_ratings_count = ratings_all.groupby(['jokeId']).count()['userId']"],"metadata":{"id":"aApE8N2krQem"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('Ratings Provided by Users:')\n","print('Average of Ratings Count =', np.round(np.mean(user_ratings_count), 4))\n","print('Median of Ratings Count =', np.round(np.median(user_ratings_count), 4))\n","\n","print('\\nRatings Received by Movies:')\n","print('Average of Ratings Count =', np.round(np.mean(joke_ratings_count), 4))\n","print('Median of Ratings Count =', np.round(np.median(joke_ratings_count), 4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j1qdl2tUrazU","executionInfo":{"status":"ok","timestamp":1643817711779,"user_tz":-420,"elapsed":1313,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"380b5600-aaaa-4b27-ed18-f117f4305010"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Ratings Provided by Users:\n","Average of Ratings Count = 29.7883\n","Median of Ratings Count = 16.0\n","\n","Ratings Received by Movies:\n","Average of Ratings Count = 12581.7071\n","Median of Ratings Count = 9644.5\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"Oa_nuIxht1WY","executionInfo":{"status":"ok","timestamp":1643817735355,"user_tz":-420,"elapsed":445,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"dc40d363-0d23-4eec-af0a-df8a392df88d"},"source":["ratings_all.head(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-c07224bd-6030-4d8e-b109-1c8d0929d63f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>jokeId</th>\n","      <th>rating</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>0.219</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>-9.281</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>8</td>\n","      <td>-9.281</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>13</td>\n","      <td>-6.781</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>15</td>\n","      <td>0.875</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>1</td>\n","      <td>16</td>\n","      <td>-9.656</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1</td>\n","      <td>17</td>\n","      <td>-9.031</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>-7.469</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>19</td>\n","      <td>-8.719</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1</td>\n","      <td>20</td>\n","      <td>-9.156</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c07224bd-6030-4d8e-b109-1c8d0929d63f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c07224bd-6030-4d8e-b109-1c8d0929d63f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c07224bd-6030-4d8e-b109-1c8d0929d63f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   userId  jokeId  rating\n","0       1       5   0.219\n","1       1       7  -9.281\n","2       1       8  -9.281\n","3       1      13  -6.781\n","4       1      15   0.875\n","5       1      16  -9.656\n","6       1      17  -9.031\n","7       1      18  -7.469\n","8       1      19  -8.719\n","9       1      20  -9.156"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lil6yv8flGKN","executionInfo":{"status":"ok","timestamp":1643817769922,"user_tz":-420,"elapsed":392,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"763a8365-95d9-4e70-d3e2-8a83f72c080e"},"source":["#checking how many movies have blank sections of data.\n","ratings_all.isnull().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["userId    0\n","jokeId    0\n","rating    0\n","dtype: int64"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"na1tEQeIlLKn","executionInfo":{"elapsed":400,"status":"ok","timestamp":1643817780003,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"outputId":"79759220-7de4-4a75-80ef-aca8d6e04710"},"source":["#determining what the data types are for the data that was just imported.\n","#int64 are whole numbers, float64 are decimels, and object are strings. \n","ratings_all.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["userId      int64\n","jokeId      int64\n","rating    float64\n","dtype: object"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"8_6v6bKFlQGx","executionInfo":{"elapsed":410,"status":"ok","timestamp":1643817783909,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"outputId":"eb877aaa-3ab7-4884-885e-61e700f29e64"},"source":["#Getting descriptive statistics for numeric columns (floats and intergers) in the data set.\n","ratings_all.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-85ffb37a-ef5b-45b4-87cd-c0d10b687027\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>jokeId</th>\n","      <th>rating</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1.761439e+06</td>\n","      <td>1.761439e+06</td>\n","      <td>1.761439e+06</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>3.272322e+04</td>\n","      <td>7.071133e+01</td>\n","      <td>1.618602e+00</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.828011e+04</td>\n","      <td>4.600790e+01</td>\n","      <td>5.302608e+00</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000e+00</td>\n","      <td>5.000000e+00</td>\n","      <td>-1.000000e+01</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.720200e+04</td>\n","      <td>2.100000e+01</td>\n","      <td>-2.031000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>3.480800e+04</td>\n","      <td>6.900000e+01</td>\n","      <td>2.219000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>4.730600e+04</td>\n","      <td>1.120000e+02</td>\n","      <td>5.719000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>6.397800e+04</td>\n","      <td>1.500000e+02</td>\n","      <td>1.000000e+01</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85ffb37a-ef5b-45b4-87cd-c0d10b687027')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-85ffb37a-ef5b-45b4-87cd-c0d10b687027 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-85ffb37a-ef5b-45b4-87cd-c0d10b687027');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["             userId        jokeId        rating\n","count  1.761439e+06  1.761439e+06  1.761439e+06\n","mean   3.272322e+04  7.071133e+01  1.618602e+00\n","std    1.828011e+04  4.600790e+01  5.302608e+00\n","min    1.000000e+00  5.000000e+00 -1.000000e+01\n","25%    1.720200e+04  2.100000e+01 -2.031000e+00\n","50%    3.480800e+04  6.900000e+01  2.219000e+00\n","75%    4.730600e+04  1.120000e+02  5.719000e+00\n","max    6.397800e+04  1.500000e+02  1.000000e+01"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qeVWbJHdlZiY","executionInfo":{"elapsed":602,"status":"ok","timestamp":1643817794193,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"outputId":"d7d2332d-14d8-46a0-b933-abe7f05e100d"},"source":["ratings_all.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1761439 entries, 0 to 1761438\n","Data columns (total 3 columns):\n"," #   Column  Dtype  \n","---  ------  -----  \n"," 0   userId  int64  \n"," 1   jokeId  int64  \n"," 2   rating  float64\n","dtypes: float64(1), int64(2)\n","memory usage: 40.3 MB\n"]}]},{"cell_type":"markdown","metadata":{"id":"8qiL6kHKEQcI"},"source":["cek"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"plgy92cB_toY","executionInfo":{"status":"ok","timestamp":1643817809649,"user_tz":-420,"elapsed":396,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"e4265b9f-5efd-4b30-b22c-d1a3f91b56e7"},"source":["#We will consider ratings file as the file of interest as it has the rating values\n","#checking the schema\n","ratings.printSchema()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["root\n"," |-- userId: integer (nullable = true)\n"," |-- jokeId: integer (nullable = true)\n"," |-- rating: double (nullable = true)\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FGncQtZA_38H","executionInfo":{"status":"ok","timestamp":1643817830968,"user_tz":-420,"elapsed":2847,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"0f999d74-331c-4c1d-cc85-6218afc462b2"},"source":["#Data dimensions\n","print('No. of rows: %d' % ratings.count())\n","ratings.show()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["No. of rows: 1761439\n","+------+------+-------------------+\n","|userId|jokeId|             rating|\n","+------+------+-------------------+\n","|     1|     5|0.21899999999999997|\n","|     1|     7|             -9.281|\n","|     1|     8|             -9.281|\n","|     1|    13| -6.781000000000001|\n","|     1|    15|              0.875|\n","|     1|    16|             -9.656|\n","|     1|    17|             -9.031|\n","|     1|    18| -7.468999999999999|\n","|     1|    19|             -8.719|\n","|     1|    20|             -9.156|\n","|     1|    21|             -7.188|\n","|     1|    22|             -8.781|\n","|     1|    23|             -8.531|\n","|     1|    24| -7.906000000000001|\n","|     1|    25| -7.468999999999999|\n","|     1|    89|  9.812000000000001|\n","|     1|    50|              9.906|\n","|     1|   102|               0.75|\n","|     1|   103|               -5.0|\n","|     1|   104|              2.938|\n","+------+------+-------------------+\n","only showing top 20 rows\n","\n"]}]},{"cell_type":"code","metadata":{"id":"P4tJdjtsAE4N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644987264328,"user_tz":-420,"elapsed":371,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"0b83c531-f3e6-428e-9733-6d9d210fc89a"},"source":["data = ratings\n","\n","#print the schema now and check that timestamp column is dropped\n","data.printSchema()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["root\n"," |-- userId: integer (nullable = true)\n"," |-- jokeId: integer (nullable = true)\n"," |-- rating: double (nullable = true)\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"Hi_9vvB_Zh0m"},"source":["Membagi dataset yang sudah dilakukan cleaning ke dalam 2 bagian, Data Training\n","(80%) dan Data Testing (20%)."]},{"cell_type":"code","metadata":{"id":"zRO8nPsiAHW7","executionInfo":{"status":"ok","timestamp":1644987275268,"user_tz":-420,"elapsed":9551,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2f893fd0-e163-4c8d-ab55-30d7a3881e22"},"source":["# Randomly split the data into train and test where 80% data is in train and remaining is test\n","train, test =ratings.randomSplit([0.8, 0.2])\n","print(\"  Train dataset:\", train.count(), \"rows\")\n","print(\"  Test dataset: \", test.count(), \"rows\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  Train dataset: 1408981 rows\n","  Test dataset:  352458 rows\n"]}]},{"cell_type":"code","metadata":{"id":"N7lkvoirAObF"},"source":["# Build a recommendation model using Alternating Least Squares method\n","# Evaluate the model by computing the RMSE on the test data\n","model = ALS(userCol=\"userId\",itemCol=\"jokeId\",ratingCol=\"rating\",rank=20, maxIter=10, nonnegative=True, coldStartStrategy=\"drop\").fit(train)\n","\n","from pyspark.ml.evaluation import RegressionEvaluator\n","evaluator=RegressionEvaluator(metricName=\"rmse\",labelCol=\"rating\",predictionCol=\"prediction\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YIDFyNJbAQb2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644987615503,"user_tz":-420,"elapsed":35303,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"59a36203-fa24-4652-e4ec-4487842e284b"},"source":["# Make predictions and print the RMSE of the ALS model\n","predictions=model.transform(test)\n","rmse=evaluator.evaluate(predictions)\n","print(\"New RMSE: \", evaluator.evaluate(model.transform(test)))\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["New RMSE:  4.596557700065154\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wOSOPCGRcqqG","executionInfo":{"status":"ok","timestamp":1643818145747,"user_tz":-420,"elapsed":3309,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"f98c394a-ac6e-44af-d5d8-5d47c9978310"},"source":["test.count()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["352026"]},"metadata":{},"execution_count":47}]},{"cell_type":"markdown","metadata":{"id":"dyVPtl3rOMvz"},"source":["***Implementing ALS with Cross Validation***"]},{"cell_type":"code","metadata":{"id":"W6otrnE_OOvi"},"source":["# Import the required functions\n","from pyspark.ml.evaluation import RegressionEvaluator\n","from pyspark.ml.recommendation import ALS\n","from pyspark.ml.tuning import ParamGridBuilder, CrossValidator"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FkLR-uqnOSTZ"},"source":["# Now we try to improve the performance of the original model using cross validation and solve the cold-start problem.\n","# we set cold start strategy to 'drop' to ensure we don't get NaN evaluation metrics\n","\n","model = ALS(userCol=\"userId\",itemCol=\"jokeId\",ratingCol=\"rating\", nonnegative = True, coldStartStrategy=\"drop\")\n","\n","#For Parameter tuning of the ALS model we use ParamGridBuilder function\n","#We tune two parameters \n","#1. The Regularization parameter ranging from 0.1, 0.01, 0.001, 0.0001\n","#2. The rank for matrix factorization\n","paramGrid = ParamGridBuilder() \\\n","    .addGrid(model.regParam, [0.1, 0.05, 0.01, 0.001]) \\\n","    .addGrid(model.rank, [5, 10, 20, 30]) \\\n","    .build()\n","\n","#Defining a cross-validator object\n","#Setting up CV and adding parameters. We will be performing a 5 fold CV\n","crossvalidation = CrossValidator(estimator = model,\n","                     estimatorParamMaps = paramGrid,\n","                     evaluator = evaluator,\n","                     numFolds=5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dwf_045E-Ev1"},"source":["\n","# Build cross validation using CrossValidator\n","cv = CrossValidator(estimator=model, estimatorParamMaps=paramGrid, evaluator=evaluator, numFolds=5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rodUDRw7FZp9"},"source":["#Fit cross validator to the 'train' dataset\n","model = crossvalidation.fit(train)\n","\n","#Extract best model from the cv model above\n","best_model = model.bestModel"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IfehHt6dO82C"},"source":["***Printing the Best Model's parameter values***"]},{"cell_type":"code","metadata":{"id":"REBX5-M0PBRj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643820714692,"user_tz":-420,"elapsed":10671,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"1ac2a187-f66f-4c7e-c5e3-39ee96b19084"},"source":["#The Best_model\n","print(type(best_model))\n","#Complete the code below to extract the ALS model parameters\n","print(\"**Best Model**\")\n","#Rank\n","print(\"Rank: \", best_model._java_obj.parent().getRank())\n","#MaxIter\n","print(\"MaxIter: \", best_model._java_obj.parent().getMaxIter())\n","#RegParam\n","print(\"RegParam: \", best_model._java_obj.parent().getRegParam())\n","# Calculate the RMSE on test data using the best set of parameters obtained after cross validation\n","print(\"Best RMSE value is: \", evaluator.evaluate(best_model.transform(test)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pyspark.ml.recommendation.ALSModel'>\n","**Best Model**\n","Rank:  5\n","MaxIter:  10\n","RegParam:  0.1\n","Best RMSE value is:  4.535154459106882\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JGqyplx69y9v","executionInfo":{"status":"ok","timestamp":1643820963465,"user_tz":-420,"elapsed":450,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"0dd58785-0a82-458e-a55f-ac2af5df8fda"},"source":["# Define evaluator as RMSE and print length of evaluator\n","evaluator = RegressionEvaluator(\n","           metricName=\"rmse\", \n","           labelCol=\"rating\", \n","           predictionCol=\"prediction\") \n","print (\"Num models to be tested: \", len(paramGrid))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Num models to be tested:  16\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tw4jLrxLSwPN","executionInfo":{"status":"ok","timestamp":1643820976804,"user_tz":-420,"elapsed":8961,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"c1d57c88-caf1-4edd-f3f0-c70c25bd4563"},"source":["pred = best_model.transform(test)\n","pred.show(10)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["+------+------+------------------+----------+\n","|userId|jokeId|            rating|prediction|\n","+------+------+------------------+----------+\n","|  2366|   148|             3.062| 1.2236784|\n","|  3175|   148|             8.344|  4.044522|\n","| 12799|   148|             2.844|  4.241194|\n","| 13623|   148|            -3.375|       0.0|\n","| 18979|   148|1.6880000000000002| 1.5335957|\n","| 19553|   148|             9.375|  4.758295|\n","| 33375|   148|            -2.656| 2.0442555|\n","| 35694|   148|             0.031|       0.0|\n","| 35912|   148|            -0.406|       0.0|\n","| 37263|   148|              0.75| 1.8638217|\n","+------+------+------------------+----------+\n","only showing top 10 rows\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"v3MVEPh3ErvH"},"source":["***Data Sparsity***"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wmZ5NdIGEjA4","executionInfo":{"status":"ok","timestamp":1644988527244,"user_tz":-420,"elapsed":6976,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"19cf8738-a395-4e7f-d457-f36774c50d84"},"source":["def get_mat_sparsity(ratings):\n","    # Count the total number of ratings in the dataset\n","    count_nonzero = ratings.select(\"rating\").count()\n","\n","    # Count the number of distinct userIds and distinct movieIds\n","    total_elements = ratings.select(\"userId\").distinct().count() * ratings.select(\"jokeId\").distinct().count()\n","\n","    # Divide the numerator by the denominator\n","    sparsity = (1.0 - (count_nonzero *1.0)/total_elements)*100\n","    print(\"The ratings dataframe is \", \"%.2f\" % sparsity + \"% sparse.\")\n","    \n","get_mat_sparsity(ratings)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The ratings dataframe is  78.72% sparse.\n"]}]}]}